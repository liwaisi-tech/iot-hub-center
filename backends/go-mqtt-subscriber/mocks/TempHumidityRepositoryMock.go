// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/liwaisi-tech/iot-hub-center/backends/go-mqtt-subscriber/internal/domain/messages/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewTempHumidityRepositoryMock creates a new instance of TempHumidityRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTempHumidityRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TempHumidityRepositoryMock {
	mock := &TempHumidityRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TempHumidityRepositoryMock is an autogenerated mock type for the TempHumidityRepository type
type TempHumidityRepositoryMock struct {
	mock.Mock
}

type TempHumidityRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TempHumidityRepositoryMock) EXPECT() *TempHumidityRepositoryMock_Expecter {
	return &TempHumidityRepositoryMock_Expecter{mock: &_m.Mock}
}

// FindPaginated provides a mock function for the type TempHumidityRepositoryMock
func (_mock *TempHumidityRepositoryMock) FindPaginated(macAddress string, limit int, offset int) ([]*entities.TempHumidityEntity, error) {
	ret := _mock.Called(macAddress, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindPaginated")
	}

	var r0 []*entities.TempHumidityEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*entities.TempHumidityEntity, error)); ok {
		return returnFunc(macAddress, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*entities.TempHumidityEntity); ok {
		r0 = returnFunc(macAddress, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.TempHumidityEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(macAddress, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TempHumidityRepositoryMock_FindPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPaginated'
type TempHumidityRepositoryMock_FindPaginated_Call struct {
	*mock.Call
}

// FindPaginated is a helper method to define mock.On call
//   - macAddress
//   - limit
//   - offset
func (_e *TempHumidityRepositoryMock_Expecter) FindPaginated(macAddress interface{}, limit interface{}, offset interface{}) *TempHumidityRepositoryMock_FindPaginated_Call {
	return &TempHumidityRepositoryMock_FindPaginated_Call{Call: _e.mock.On("FindPaginated", macAddress, limit, offset)}
}

func (_c *TempHumidityRepositoryMock_FindPaginated_Call) Run(run func(macAddress string, limit int, offset int)) *TempHumidityRepositoryMock_FindPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *TempHumidityRepositoryMock_FindPaginated_Call) Return(tempHumidityEntitys []*entities.TempHumidityEntity, err error) *TempHumidityRepositoryMock_FindPaginated_Call {
	_c.Call.Return(tempHumidityEntitys, err)
	return _c
}

func (_c *TempHumidityRepositoryMock_FindPaginated_Call) RunAndReturn(run func(macAddress string, limit int, offset int) ([]*entities.TempHumidityEntity, error)) *TempHumidityRepositoryMock_FindPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRecord provides a mock function for the type TempHumidityRepositoryMock
func (_mock *TempHumidityRepositoryMock) GetLatestRecord(macAddress string) (*entities.TempHumidityEntity, error) {
	ret := _mock.Called(macAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRecord")
	}

	var r0 *entities.TempHumidityEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entities.TempHumidityEntity, error)); ok {
		return returnFunc(macAddress)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entities.TempHumidityEntity); ok {
		r0 = returnFunc(macAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TempHumidityEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(macAddress)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TempHumidityRepositoryMock_GetLatestRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRecord'
type TempHumidityRepositoryMock_GetLatestRecord_Call struct {
	*mock.Call
}

// GetLatestRecord is a helper method to define mock.On call
//   - macAddress
func (_e *TempHumidityRepositoryMock_Expecter) GetLatestRecord(macAddress interface{}) *TempHumidityRepositoryMock_GetLatestRecord_Call {
	return &TempHumidityRepositoryMock_GetLatestRecord_Call{Call: _e.mock.On("GetLatestRecord", macAddress)}
}

func (_c *TempHumidityRepositoryMock_GetLatestRecord_Call) Run(run func(macAddress string)) *TempHumidityRepositoryMock_GetLatestRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TempHumidityRepositoryMock_GetLatestRecord_Call) Return(tempHumidityEntity *entities.TempHumidityEntity, err error) *TempHumidityRepositoryMock_GetLatestRecord_Call {
	_c.Call.Return(tempHumidityEntity, err)
	return _c
}

func (_c *TempHumidityRepositoryMock_GetLatestRecord_Call) RunAndReturn(run func(macAddress string) (*entities.TempHumidityEntity, error)) *TempHumidityRepositoryMock_GetLatestRecord_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type TempHumidityRepositoryMock
func (_mock *TempHumidityRepositoryMock) Save(entity *entities.TempHumidityEntity) error {
	ret := _mock.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entities.TempHumidityEntity) error); ok {
		r0 = returnFunc(entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TempHumidityRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type TempHumidityRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - entity
func (_e *TempHumidityRepositoryMock_Expecter) Save(entity interface{}) *TempHumidityRepositoryMock_Save_Call {
	return &TempHumidityRepositoryMock_Save_Call{Call: _e.mock.On("Save", entity)}
}

func (_c *TempHumidityRepositoryMock_Save_Call) Run(run func(entity *entities.TempHumidityEntity)) *TempHumidityRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.TempHumidityEntity))
	})
	return _c
}

func (_c *TempHumidityRepositoryMock_Save_Call) Return(err error) *TempHumidityRepositoryMock_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TempHumidityRepositoryMock_Save_Call) RunAndReturn(run func(entity *entities.TempHumidityEntity) error) *TempHumidityRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}
